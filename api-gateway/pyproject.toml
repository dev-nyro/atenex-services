# File: pyproject.toml
# api-gateway/pyproject.toml
[tool.poetry]
name = "api-gateway"
version = "1.0.0"
description = "API Gateway for Nyro Microservices"
authors = ["Nyro <dev@nyro.com>"]
readme = "README.md" # Aunque no lo modifiquemos, lo referenciamos

[tool.poetry.dependencies]
python = "^3.10"

# Core FastAPI y servidor ASGI
fastapi = "^0.110.0" # O la versión que estés usando
uvicorn = {extras = ["standard"], version = "^0.28.0"} # Servidor ASGI con dependencias estándar (watchfiles, etc.)
gunicorn = "^21.2.0" # Servidor WSGI/Process Manager (usado en los logs)

# Configuración y validación
pydantic = {extras = ["email"], version = "^2.6.4"} # Para validación de datos y settings
pydantic-settings = "^2.2.1" # Para cargar settings desde .env/entorno

# Cliente HTTP asíncrono
httpx = "^0.27.0" # Para hacer las llamadas proxy

# Manejo de JWT
python-jose = {extras = ["cryptography"], version = "^3.3.0"} # Para decodificar y validar JWTs

# Logging estructurado
structlog = "^24.1.0" # Para logging JSON estructurado

# Cliente Supabase
supabase = "^2.5.0" # Cliente oficial Python para Supabase (incluye gotrue-py para Auth)

# Utilidades (opcional, pero útil)
tenacity = "^8.2.3" # Para reintentos (podría usarse en llamadas a Supabase o backends)
# email-validator = "^2.1.1" # Si necesitas validación de email más estricta que la de Pydantic

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.4" # Framework de testing
pytest-asyncio = "^0.21.1" # Para testear código async con pytest
pytest-httpx = "^0.29.0" # Para mockear respuestas HTTPX en tests
# black = "^24.3.0" # Formateador de código (opcional)
# ruff = "^0.3.4" # Linter rápido (opcional)
# mypy = "^1.9.0" # Type checker (opcional)

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"