# File: pyproject.toml
# api-gateway/pyproject.toml
[tool.poetry]
name = "atenex-api-gateway" # <-- Nombre actualizado
version = "1.0.1" # <-- Versión actualizada (opcional)
description = "API Gateway for Atenex Microservices" # <-- Descripción actualizada
authors = ["Atenex Team <dev@atenex.com>"] # <-- Autor actualizado
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"

# Core FastAPI y servidor ASGI
fastapi = "^0.110.0" # Verifica la versión exacta que necesitas o usa rangos
uvicorn = {extras = ["standard"], version = "^0.28.0"} # Servidor ASGI
gunicorn = "^21.2.0" # Servidor WSGI/Worker manager (para producción)

# Configuración y validación
pydantic = {extras = ["email"], version = "^2.6.4"} # Validación de datos + email
pydantic-settings = "^2.2.1" # Cargar config desde env vars/files

# Cliente HTTP asíncrono
httpx = "^0.27.0" # Para hacer llamadas proxy a otros servicios

# Manejo de JWT
python-jose = {extras = ["cryptography"], version = "^3.3.0"} # Crear/validar JWTs

# Logging estructurado
structlog = "^24.1.0" # Logging avanzado JSON

# Cliente PostgreSQL Asíncrono
asyncpg = "^0.29.0" # <-- ASEGURADO QUE ESTÁ AQUÍ

# Hashing de Contraseñas
passlib = {extras = ["bcrypt"], version = "^1.7.4"} # <-- ASEGURADO QUE ESTÁ AQUÍ

# Utilidades (opcional, descomenta si las usas)
# tenacity = "^8.2.3" # Para reintentos
# email-validator = "^2.1.0" # Si pydantic necesita validación extra

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.4" # Framework de testing
pytest-asyncio = "^0.21.1" # Soporte async en pytest
pytest-httpx = "^0.29.0" # Mockear cliente httpx en tests
# Descomenta y usa linters/formatters si los necesitas
# black = "^24.3.0"
# ruff = "^0.3.4"
# mypy = "^1.9.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"