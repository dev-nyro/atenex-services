# .github/workflows/CICD.yml
name: Build and Push Microservices

on:
  push:
    branches:
      - develop # O la rama que uses para despliegue continuo

env:
  # Define variables globales si son necesarias
  # REGISTRY: ghcr.io
  # IMAGE_OWNER: dev-nyro

jobs:
  # --- TRABAJO EXISTENTE PARA INGEST SERVICE (EJEMPLO) ---
  build_and_push_ingest:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Necesario para pushear a GHCR
    defaults:
      run:
        working-directory: ./ingest-service # Directorio del Ingest Service
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta_ingest
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/ingest-service
          tags: |
            type=ref,event=branch
            type=sha,prefix=,suffix=,format=short

      - name: Build and push Docker image for Ingest Service
        uses: docker/build-push-action@v5
        with:
          context: ./ingest-service # Asegurar el contexto correcto
          push: true
          tags: ${{ steps.meta_ingest.outputs.tags }}
          labels: ${{ steps.meta_ingest.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # --- TRABAJO EXISTENTE PARA QUERY SERVICE (EJEMPLO) ---
  build_and_push_query:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    defaults:
      run:
        working-directory: ./query-service # Directorio del Query Service
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta_query
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/query-service
          tags: |
            type=ref,event=branch
            type=sha,prefix=,suffix=,format=short

      - name: Build and push Docker image for Query Service
        uses: docker/build-push-action@v5
        with:
          context: ./query-service # Asegurar el contexto correcto
          push: true
          tags: ${{ steps.meta_query.outputs.tags }}
          labels: ${{ steps.meta_query.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # --- NUEVO TRABAJO PARA API GATEWAY ---
  build_and_push_gateway:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    # *** IMPORTANTE: Especificar el working-directory para este job ***
    defaults:
      run:
        working-directory: ./api-gateway # Directorio del API Gateway
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta_gateway # ID único para este step
        uses: docker/metadata-action@v5
        with:
          # *** Nombre correcto de la imagen para el Gateway ***
          images: ghcr.io/${{ github.repository_owner }}/api-gateway
          tags: |
            type=ref,event=branch # Tag por rama (ej: develop)
            type=sha,prefix=,suffix=,format=short # Tag por commit corto
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'develop') }} # Tag 'latest' solo para rama develop

      - name: Build and push Docker image for API Gateway
        uses: docker/build-push-action@v5
        with:
          # *** Contexto correcto para el build del Gateway ***
          context: ./api-gateway
          push: true
          tags: ${{ steps.meta_gateway.outputs.tags }}
          labels: ${{ steps.meta_gateway.outputs.labels }}
          cache-from: type=gha # Habilitar caché de build de GitHub Actions
          cache-to: type=gha,mode=max