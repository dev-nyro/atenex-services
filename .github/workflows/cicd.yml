name: CI/CD Pipeline Docker -> Manifest Update

on:
  push:
    branches: [ "develop" ] # Dispara en push a la rama develop

env:
  # --- AJUSTA ESTAS VARIABLES ---
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/dev-nyro/ingest-service
  MANIFEST_REPO_OWNER: dev-nyro
  MANIFEST_REPO_NAME: manifests-nyro
  MANIFEST_REPO_BRANCH: develop
  MANIFEST_PATH_API: ingest-service/deployment-api.yaml
  MANIFEST_PATH_WORKER: ingest-service/deployment-worker.yaml
  # --- FIN DE VARIABLES AJUSTABLES ---

jobs:
  build-push-update:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      # 1. Checkout del código de la aplicación
      - name: Checkout Application Code
        uses: actions/checkout@v4

      # 2. Configurar Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Login a GitHub Container Registry (GHCR)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 4. Generar etiqueta para la imagen
      - name: Generate Image Tag
        id: image_tag
        run: |
          echo "::group::Generating Image Tag"
          # Usar el nombre de la rama (ref_name) y el hash corto del commit
          TAG="${{ github.ref_name }}-$(echo $GITHUB_SHA | cut -c1-7)"
          # Asegurarse que la etiqueta sea válida para Docker
          TAG=$(echo $TAG | sed 's/[^a-zA-Z0-9.-]/-/g')
          echo "Branch/Ref Name: ${{ github.ref_name }}"
          echo "Commit SHA (short): $(echo $GITHUB_SHA | cut -c1-7)"
          echo "Generated Tag: $TAG"
          FULL_IMAGE_NAME="${{ env.IMAGE_NAME }}:$TAG"
          echo "Full Image Name: $FULL_IMAGE_NAME"
          # Guardar para usar en pasos posteriores
          echo "image_tag=$TAG" >> $GITHUB_OUTPUT
          echo "full_image_name=$FULL_IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      # 5. Construir y Empujar la imagen Docker a GHCR
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.image_tag.outputs.full_image_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Añadido para obtener el digest de la imagen empujada
          outputs: type=registry,push=true

      # --- Actualización del Repositorio de Manifests ---
      - name: Checkout Manifests Repository
        # Condición CORREGIDA: Solo ejecutar en eventos 'push' (ya filtrado a develop por 'on:')
        if: github.event_name == 'push'
        uses: actions/checkout@v4
        with:
          repository: ${{ env.MANIFEST_REPO_OWNER }}/${{ env.MANIFEST_REPO_NAME }}
          ref: ${{ env.MANIFEST_REPO_BRANCH }}
          token: ${{ secrets.MANIFEST_PAT }} # PAT con permisos de escritura en el repo de manifests
          path: manifests-repo # Clonar en un subdirectorio

      - name: Update Manifest Files
        if: github.event_name == 'push'
        run: |
          echo "::group::Updating Manifest Files"
          echo "Target Manifest Directory: manifests-repo"
          cd manifests-repo
          echo "Current directory: $(pwd)"
          echo "Listing files in ingest-service:"
          ls -la ingest-service/ || echo "Directory ingest-service not found or empty."

          TARGET_IMAGE="${{ steps.image_tag.outputs.full_image_name }}"
          echo "Updating image to: $TARGET_IMAGE"

          API_FILE="${{ env.MANIFEST_PATH_API }}"
          WORKER_FILE="${{ env.MANIFEST_PATH_WORKER }}"

          echo "--- Updating API Deployment ($API_FILE) ---"
          echo "Before update:"
          grep 'image:' "$API_FILE" || echo "Image line not found in $API_FILE"
          sed -i "s|image: .*|image: $TARGET_IMAGE|" "$API_FILE"
          echo "After update:"
          grep 'image:' "$API_FILE"

          echo "--- Updating Worker Deployment ($WORKER_FILE) ---"
          echo "Before update:"
          grep 'image:' "$WORKER_FILE" || echo "Image line not found in $WORKER_FILE"
          sed -i "s|image: .*|image: $TARGET_IMAGE|" "$WORKER_FILE"
          echo "After update:"
          grep 'image:' "$WORKER_FILE"

          echo "--- Checking Git Status ---"
          git status
          echo "--- Checking Git Diff ---"
          # Usar --exit-code para que falle si no hay cambios (opcional, útil para debug)
          git diff # || echo "No differences found by git diff."

          echo "Manifest files update process finished."
          echo "::endgroup::"

      - name: Commit and Push Manifest Changes
        if: github.event_name == 'push'
        run: |
          echo "::group::Committing and Pushing Manifest Changes"
          cd manifests-repo
          echo "Current directory: $(pwd)"

          echo "Configuring Git user..."
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          echo "Git user configured."

          API_FILE="${{ env.MANIFEST_PATH_API }}"
          WORKER_FILE="${{ env.MANIFEST_PATH_WORKER }}"

          echo "Adding files to staging: $API_FILE, $WORKER_FILE"
          git add "$API_FILE" "$WORKER_FILE"

          echo "Checking for staged changes..."
          if git diff --staged --quiet; then
            echo "No changes staged. Nothing to commit."
          else
            echo "Changes detected. Committing..."
            COMMIT_MSG="Update image to ${{ steps.image_tag.outputs.full_image_name }} [CI]"
            echo "Commit message: $COMMIT_MSG"
            git commit -m "$COMMIT_MSG"

            echo "Pushing changes to origin/${{ env.MANIFEST_REPO_BRANCH }}..."
            # Asegúrate que la URL remota incluya el token si es necesario (checkout action suele configurarlo bien)
            git push origin ${{ env.MANIFEST_REPO_BRANCH }}
            echo "Push successful."
          fi
          echo "::endgroup::"