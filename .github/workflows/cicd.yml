name: CI/CD Pipeline Docker -> Manifest Update (All Services - Selective Build)

on:
  push:
    branches: [ "develop" ]

env:
  REGISTRY: ghcr.io
  MANIFEST_REPO_OWNER: dev-nyro
  MANIFEST_REPO_NAME: manifests-nyro
  MANIFEST_REPO_BRANCH: develop

  INGEST_SERVICE_DIR: ingest-service
  INGEST_IMAGE_NAME: ghcr.io/dev-nyro/ingest-service
  QUERY_SERVICE_DIR: query-service
  QUERY_IMAGE_NAME: ghcr.io/dev-nyro/query-service
  GATEWAY_SERVICE_DIR: api-gateway
  GATEWAY_IMAGE_NAME: ghcr.io/dev-nyro/api-gateway
  EMBEDDING_SERVICE_DIR: embedding-service
  EMBEDDING_IMAGE_NAME: ghcr.io/dev-nyro/embedding-service
  DOCPROC_SERVICE_DIR: docproc-service
  DOCPROC_IMAGE_NAME: ghcr.io/dev-nyro/docproc-service
  RERANKER_SERVICE_DIR: reranker-service
  RERANKER_IMAGE_NAME: ghcr.io/dev-nyro/reranker-service

jobs:
  build-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      pull-requests: read # tj-actions/changed-files puede necesitarlo incluso para push en algunos escenarios
    outputs:
      ingest_built: ${{ steps.build_ingest.outputs.digest != '' && steps.build_ingest.outcome == 'success' }}
      query_built: ${{ steps.build_query.outputs.digest != '' && steps.build_query.outcome == 'success' }}
      gateway_built: ${{ steps.build_gateway.outputs.digest != '' && steps.build_gateway.outcome == 'success' }}
      embedding_built: ${{ steps.build_embedding.outputs.digest != '' && steps.build_embedding.outcome == 'success' }}
      docproc_built: ${{ steps.build_docproc.outputs.digest != '' && steps.build_docproc.outcome == 'success' }}
      reranker_built: ${{ steps.build_reranker.outputs.digest != '' && steps.build_reranker.outcome == 'success' }}
      image_tag: ${{ steps.image_tag_common.outputs.image_tag }}

    steps:
      - name: Checkout Application Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necesario para que changed-files compare con github.event.before

      - name: Get changed files
        id: changed_files
        uses: tj-actions/changed-files@v44
        with:
          # Para eventos push, compara el GITHUB_SHA actual con el SHA antes del push.
          # Esto asegura que solo se consideren los cambios introducidos por el push actual.
          sha: ${{ github.event.before }}
          files_yaml: |
            ingest:
              - '${{ env.INGEST_SERVICE_DIR }}/**'
            query:
              - '${{ env.QUERY_SERVICE_DIR }}/**'
            gateway:
              - '${{ env.GATEWAY_SERVICE_DIR }}/**'
            embedding:
              - '${{ env.EMBEDDING_SERVICE_DIR }}/**'
            docproc:
              - '${{ env.DOCPROC_SERVICE_DIR }}/**'
            reranker:
              - '${{ env.RERANKER_SERVICE_DIR }}/**'

      - name: Set up Docker Buildx
        if: steps.changed_files.outputs.ingest_any_changed == 'true' || steps.changed_files.outputs.query_any_changed == 'true' || steps.changed_files.outputs.gateway_any_changed == 'true' || steps.changed_files.outputs.embedding_any_changed == 'true' || steps.changed_files.outputs.docproc_any_changed == 'true' || steps.changed_files.outputs.reranker_any_changed == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: steps.changed_files.outputs.ingest_any_changed == 'true' || steps.changed_files.outputs.query_any_changed == 'true' || steps.changed_files.outputs.gateway_any_changed == 'true' || steps.changed_files.outputs.embedding_any_changed == 'true' || steps.changed_files.outputs.docproc_any_changed == 'true' || steps.changed_files.outputs.reranker_any_changed == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Common Image Tag
        if: steps.changed_files.outputs.ingest_any_changed == 'true' || steps.changed_files.outputs.query_any_changed == 'true' || steps.changed_files.outputs.gateway_any_changed == 'true' || steps.changed_files.outputs.embedding_any_changed == 'true' || steps.changed_files.outputs.docproc_any_changed == 'true' || steps.changed_files.outputs.reranker_any_changed == 'true'
        id: image_tag_common
        run: |
          TAG="${{ github.ref_name }}-$(echo $GITHUB_SHA | cut -c1-7)"
          TAG=$(echo $TAG | sed 's/[^a-zA-Z0-9.-]/-/g' | sed 's/^[.-]*//;s/[.-]*$//')
          TAG=${TAG::128}
          echo "Generated Common Tag: $TAG"
          echo "image_tag=$TAG" >> $GITHUB_OUTPUT

      - name: Build and push Ingest Service Docker image
        id: build_ingest
        if: steps.changed_files.outputs.ingest_any_changed == 'true'
        continue-on-error: true
        uses: docker/build-push-action@v5
        with:
          context: ./${{ env.INGEST_SERVICE_DIR }}
          file: ./${{ env.INGEST_SERVICE_DIR }}/Dockerfile
          push: ${{ github.event_name == 'push' }}
          tags: ${{ env.INGEST_IMAGE_NAME }}:${{ steps.image_tag_common.outputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=registry

      - name: Build and push Query Service Docker image
        id: build_query
        if: steps.changed_files.outputs.query_any_changed == 'true'
        continue-on-error: true
        uses: docker/build-push-action@v5
        with:
          context: ./${{ env.QUERY_SERVICE_DIR }}
          file: ./${{ env.QUERY_SERVICE_DIR }}/Dockerfile
          push: ${{ github.event_name == 'push' }}
          tags: ${{ env.QUERY_IMAGE_NAME }}:${{ steps.image_tag_common.outputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=registry

      - name: Build and push API Gateway Docker image
        id: build_gateway
        if: steps.changed_files.outputs.gateway_any_changed == 'true'
        continue-on-error: true
        uses: docker/build-push-action@v5
        with:
          context: ./${{ env.GATEWAY_SERVICE_DIR }}
          file: ./${{ env.GATEWAY_SERVICE_DIR }}/Dockerfile
          push: ${{ github.event_name == 'push' }}
          tags: ${{ env.GATEWAY_IMAGE_NAME }}:${{ steps.image_tag_common.outputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=registry

      - name: Build and push Embedding Service Docker image
        id: build_embedding
        if: steps.changed_files.outputs.embedding_any_changed == 'true'
        continue-on-error: true
        uses: docker/build-push-action@v5
        with:
          context: ./${{ env.EMBEDDING_SERVICE_DIR }}
          file: ./${{ env.EMBEDDING_SERVICE_DIR }}/Dockerfile
          push: ${{ github.event_name == 'push' }}
          tags: ${{ env.EMBEDDING_IMAGE_NAME }}:${{ steps.image_tag_common.outputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=registry

      - name: Build and push DocProc Service Docker image
        id: build_docproc
        if: steps.changed_files.outputs.docproc_any_changed == 'true'
        continue-on-error: true # Re-añadido, asumiendo que quieres que el pipeline continúe
        uses: docker/build-push-action@v5
        with:
          context: ./${{ env.DOCPROC_SERVICE_DIR }}
          file: ./${{ env.DOCPROC_SERVICE_DIR }}/Dockerfile
          push: ${{ github.event_name == 'push' }}
          tags: ${{ env.DOCPROC_IMAGE_NAME }}:${{ steps.image_tag_common.outputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=registry

      - name: Build and push Reranker Service Docker image
        id: build_reranker
        if: steps.changed_files.outputs.reranker_any_changed == 'true'
        continue-on-error: true # IMPORTANTE: Si esto falla, reranker_built será false. REVISA LOS LOGS DE ESTE PASO.
        uses: docker/build-push-action@v5
        with:
          context: ./${{ env.RERANKER_SERVICE_DIR }}
          file: ./${{ env.RERANKER_SERVICE_DIR }}/Dockerfile
          push: ${{ github.event_name == 'push' }}
          tags: ${{ env.RERANKER_IMAGE_NAME }}:${{ steps.image_tag_common.outputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=registry

      - name: Debug Build Outputs and Job Outputs Evaluation
        if: always()
        run: |
          echo "::group::Debug Information from build-push job"
          echo "Event Name: ${{ github.event_name }}"
          echo "Commit SHA before push (github.event.before): ${{ github.event.before }}"
          echo "Current Commit SHA (GITHUB_SHA): ${GITHUB_SHA}"
          echo "Common Image Tag Generated (steps.image_tag_common.outputs.image_tag): ${{ steps.image_tag_common.outputs.image_tag }}"
          echo "--- Changed Files Outputs (based on diff with ${{ github.event.before }}) ---"
          echo "Ingest any_changed: ${{ steps.changed_files.outputs.ingest_any_changed }}"
          echo "Query any_changed: ${{ steps.changed_files.outputs.query_any_changed }}"
          echo "Gateway any_changed: ${{ steps.changed_files.outputs.gateway_any_changed }}"
          echo "Embedding any_changed: ${{ steps.changed_files.outputs.embedding_any_changed }}"
          echo "DocProc any_changed: ${{ steps.changed_files.outputs.docproc_any_changed }}"
          echo "Reranker any_changed: ${{ steps.changed_files.outputs.reranker_any_changed }}"
          echo "--- Individual Build Step Details ---"
          echo "build_ingest outcome: ${{ steps.build_ingest.outcome }}, digest: '${{ steps.build_ingest.outputs.digest }}'"
          echo "build_query outcome: ${{ steps.build_query.outcome }}, digest: '${{ steps.build_query.outputs.digest }}'"
          echo "build_gateway outcome: ${{ steps.build_gateway.outcome }}, digest: '${{ steps.build_gateway.outputs.digest }}'"
          echo "build_embedding outcome: ${{ steps.build_embedding.outcome }}, digest: '${{ steps.build_embedding.outputs.digest }}'"
          echo "build_docproc outcome: ${{ steps.build_docproc.outcome }}, digest: '${{ steps.build_docproc.outputs.digest }}'"
          echo "build_reranker outcome: ${{ steps.build_reranker.outcome }}, digest: '${{ steps.build_reranker.outputs.digest }}' <--- REVISA ESTE LOG SI EL MANIFIESTO DEL RERANKER NO SE ACTUALIZA"
          echo "--- Job Outputs Evaluation (as they would be for 'needs' context) ---"
          echo "Output ingest_built: ${{ (steps.build_ingest.outputs.digest != '' && steps.build_ingest.outcome == 'success') }}"
          echo "Output query_built: ${{ (steps.build_query.outputs.digest != '' && steps.build_query.outcome == 'success') }}"
          echo "Output gateway_built: ${{ (steps.build_gateway.outputs.digest != '' && steps.build_gateway.outcome == 'success') }}"
          echo "Output embedding_built: ${{ (steps.build_embedding.outputs.digest != '' && steps.build_embedding.outcome == 'success') }}"
          echo "Output docproc_built: ${{ (steps.build_docproc.outputs.digest != '' && steps.build_docproc.outcome == 'success') }}"
          echo "Output reranker_built: ${{ (steps.build_reranker.outputs.digest != '' && steps.build_reranker.outcome == 'success') }}"
          echo "::endgroup::"

  update-manifests:
    needs: build-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (needs.build-push.outputs.ingest_built == 'true' || needs.build-push.outputs.query_built == 'true' || needs.build-push.outputs.gateway_built == 'true' || needs.build-push.outputs.embedding_built == 'true' || needs.build-push.outputs.docproc_built == 'true' || needs.build-push.outputs.reranker_built == 'true')

    steps:
      - name: Debug Update Manifests Job Trigger
        run: |
          echo "::group::Debug Information for update-manifests job trigger"
          echo "Job triggered because at least one service was built."
          echo "needs.build-push.outputs.ingest_built: ${{ needs.build-push.outputs.ingest_built }}"
          echo "needs.build-push.outputs.query_built: ${{ needs.build-push.outputs.query_built }}"
          echo "needs.build-push.outputs.gateway_built: ${{ needs.build-push.outputs.gateway_built }}"
          echo "needs.build-push.outputs.embedding_built: ${{ needs.build-push.outputs.embedding_built }}"
          echo "needs.build-push.outputs.docproc_built: ${{ needs.build-push.outputs.docproc_built }}"
          echo "needs.build-push.outputs.reranker_built: ${{ needs.build-push.outputs.reranker_built }}"
          echo "needs.build-push.outputs.image_tag: ${{ needs.build-push.outputs.image_tag }}"
          echo "::endgroup::"

      - name: Checkout Manifests Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.MANIFEST_REPO_OWNER }}/${{ env.MANIFEST_REPO_NAME }}
          ref: ${{ env.MANIFEST_REPO_BRANCH }}
          token: ${{ secrets.MANIFEST_PAT }}
          path: manifests-repo

      - name: Update Manifest Files Conditionally
        id: update_manifest_files # Renombrado para claridad
        env:
          INGEST_BUILT: ${{ needs.build-push.outputs.ingest_built }}
          QUERY_BUILT: ${{ needs.build-push.outputs.query_built }}
          GATEWAY_BUILT: ${{ needs.build-push.outputs.gateway_built }}
          EMBEDDING_BUILT: ${{ needs.build-push.outputs.embedding_built }}
          DOCPROC_BUILT: ${{ needs.build-push.outputs.docproc_built }}
          RERANKER_BUILT: ${{ needs.build-push.outputs.reranker_built }}
          COMMON_TAG: ${{ needs.build-push.outputs.image_tag }}
          # Rutas relativas al checkout del repo de manifiestos
          INGEST_MANIFEST_PATH_API_REL: ${{ env.INGEST_SERVICE_DIR }}/deployment-api.yaml
          INGEST_MANIFEST_PATH_WORKER_REL: ${{ env.INGEST_SERVICE_DIR }}/deployment-worker.yaml
          QUERY_MANIFEST_PATH_REL: ${{ env.QUERY_SERVICE_DIR }}/deployment.yaml
          GATEWAY_MANIFEST_PATH_REL: ${{ env.GATEWAY_SERVICE_DIR }}/deployment.yaml
          EMBEDDING_MANIFEST_PATH_REL: ${{ env.EMBEDDING_SERVICE_DIR }}/deployment.yaml
          DOCPROC_MANIFEST_PATH_REL: ${{ env.DOCPROC_SERVICE_DIR }}/deployment.yaml
          RERANKER_MANIFEST_PATH_REL: ${{ env.RERANKER_SERVICE_DIR }}/deployment.yaml
        run: |
          echo "::group::Updating Manifest Files Conditionally"
          cd manifests-repo
          echo "Current directory: $(pwd)"
          echo "Using COMMON_TAG: $COMMON_TAG for manifest updates."

          if [ -z "$COMMON_TAG" ]; then
            echo "::error::COMMON_TAG is empty in update_manifest_files step. Aborting."
            exit 1
          fi

          update_single_manifest() {
            local SERVICE_NAME="$1"
            local BUILT_FLAG="$2"
            local IMAGE_BASE_NAME_VAR="$3" 
            local MANIFEST_PATH_REL="$4"
            local IMAGE_BASE_NAME="${!IMAGE_BASE_NAME_VAR}" 

            if [ "$BUILT_FLAG" = "true" ]; then
              TARGET_IMAGE="${IMAGE_BASE_NAME}:$COMMON_TAG"
              echo "Attempting to update $SERVICE_NAME image to: $TARGET_IMAGE in $MANIFEST_PATH_REL"
              if [ -f "$MANIFEST_PATH_REL" ]; then
                # Usar delimitador | para sed, asumiendo que no está en COMMON_TAG (ya sanitizado)
                sed -i "s|image: .*|image: $TARGET_IMAGE|" "$MANIFEST_PATH_REL"
                echo "Updated $MANIFEST_PATH_REL for $SERVICE_NAME"
              else
                echo "::error::$SERVICE_NAME manifest file '$MANIFEST_PATH_REL' not found!"
              fi
            else
              echo "Skipping $SERVICE_NAME manifest update (BUILT_FLAG is '$BUILT_FLAG', not 'true')."
            fi
          }

          update_single_manifest "Ingest API" "$INGEST_BUILT" "INGEST_IMAGE_NAME" "$INGEST_MANIFEST_PATH_API_REL"
          if [ -n "$INGEST_MANIFEST_PATH_WORKER_REL" ]; then
            update_single_manifest "Ingest Worker" "$INGEST_BUILT" "INGEST_IMAGE_NAME" "$INGEST_MANIFEST_PATH_WORKER_REL"
          fi
          update_single_manifest "Query Service" "$QUERY_BUILT" "QUERY_IMAGE_NAME" "$QUERY_MANIFEST_PATH_REL"
          update_single_manifest "API Gateway" "$GATEWAY_BUILT" "GATEWAY_IMAGE_NAME" "$GATEWAY_MANIFEST_PATH_REL"
          update_single_manifest "Embedding Service" "$EMBEDDING_BUILT" "EMBEDDING_IMAGE_NAME" "$EMBEDDING_MANIFEST_PATH_REL"
          update_single_manifest "DocProc Service" "$DOCPROC_BUILT" "DOCPROC_IMAGE_NAME" "$DOCPROC_MANIFEST_PATH_REL"
          update_single_manifest "Reranker Service" "$RERANKER_BUILT" "RERANKER_IMAGE_NAME" "$RERANKER_MANIFEST_PATH_REL"
          
          echo "--- Checking Git Status Before Commit ---"
          git status # Muestra qué archivos han cambiado según git
          
          # Determinar si hubo cambios reales para el output
          git add . # Stage all potential changes
          if git diff --staged --quiet; then
            echo "manifest_actually_changed=false" >> $GITHUB_OUTPUT
            echo "No actual manifest changes were detected by git after sed commands."
          else
            echo "manifest_actually_changed=true" >> $GITHUB_OUTPUT
            echo "Manifest changes detected by git after sed commands."
          fi
          echo "::endgroup::"

      - name: Commit and Push Manifest Changes
        # Solo commitear si update_manifest_files realmente resultó en cambios en git
        if: steps.update_manifest_files.outputs.manifest_actually_changed == 'true'
        env:
          IMAGE_TAG_FOR_COMMIT: ${{ needs.build-push.outputs.image_tag }}
        run: |
          echo "::group::Committing and Pushing Manifest Changes"
          cd manifests-repo
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Los archivos ya deberían estar staged por el paso anterior
          # git add . # No es necesario si el paso anterior ya hizo git add . y git diff --staged

          echo "Manifest changes detected. Committing..."
          COMMIT_MSG="Update service image(s) to tag $IMAGE_TAG_FOR_COMMIT [CI]"
          git commit -m "$COMMIT_MSG"
          if git push origin ${{ env.MANIFEST_REPO_BRANCH }}; then
              echo "Push successful."
          else
              echo "::error::Push failed. Check PAT permissions and branch protection rules."
              exit 1
          fi
          echo "::endgroup::"